return {
  -- ‚úÖ MASON: Tr√¨nh qu·∫£n l√Ω c√†i ƒë·∫∑t LSP, DAP, formatter, linter...
  {
    "williamboman/mason.nvim",
    opts = function(_, opts)
      -- M·ªü r·ªông danh s√°ch tool s·∫Ω t·ª± ƒë·ªông c√†i khi m·ªü Neovim
      vim.list_extend(opts.ensure_installed, {
        "stylua", -- ƒë·ªãnh d·∫°ng code Lua
        "selene", -- linter Lua
        "luacheck", -- linter Lua
        "shellcheck", -- ki·ªÉm tra shell script
        "shfmt", -- ƒë·ªãnh d·∫°ng shell script
        "tailwindcss-language-server", -- h·ªó tr·ª£ LSP cho TailwindCSS
        "typescript-language-server", -- LSP cho TypeScript
        "css-lsp", -- LSP cho CSS
      })
    end,
  },

  -- ‚úÖ LSP CONFIG: C·∫•u h√¨nh c√°c ng√¥n ng·ªØ ƒë∆∞·ª£c Mason c√†i ·ªü tr√™n
  {
    "neovim/nvim-lspconfig",
    opts = {
      -- ‚ùå T·∫Øt inlay hint m·∫∑c ƒë·ªãnh c·ªßa Neovim (n·∫øu c√≥ plugin kh√°c x·ª≠ l√Ω)
      inlay_hints = { enabled = false },

      -- üß† C·∫•u h√¨nh server LSP c·ª• th·ªÉ cho t·ª´ng ng√¥n ng·ªØ
      ---@type lspconfig.options
      servers = {
        -- üëâ CSS
        cssls = {},

        -- üëâ TailwindCSS: thi·∫øt l·∫≠p root project l√† th∆∞ m·ª•c ch·ª©a .git
        tailwindcss = {
          root_dir = function(...)
            return require("lspconfig.util").root_pattern(".git")(...)
          end,
        },

        -- üëâ TypeScript/JavaScript
        tsserver = {
          root_dir = function(...)
            return require("lspconfig.util").root_pattern(".git")(...)
          end,
          single_file_support = false, -- Ch·ªâ k√≠ch ho·∫°t khi c√≥ project
          settings = {
            -- Inlay Hint cho TypeScript
            typescript = {
              inlayHints = {
                includeInlayParameterNameHints = "literal",
                includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                includeInlayFunctionParameterTypeHints = true,
                includeInlayVariableTypeHints = false,
                includeInlayPropertyDeclarationTypeHints = true,
                includeInlayFunctionLikeReturnTypeHints = true,
                includeInlayEnumMemberValueHints = true,
              },
            },
            -- Inlay Hint cho JavaScript
            javascript = {
              inlayHints = {
                includeInlayParameterNameHints = "all",
                includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                includeInlayFunctionParameterTypeHints = true,
                includeInlayVariableTypeHints = true,
                includeInlayPropertyDeclarationTypeHints = true,
                includeInlayFunctionLikeReturnTypeHints = true,
                includeInlayEnumMemberValueHints = true,
              },
            },
          },
        },

        -- üëâ HTML
        html = {
          filetypes = {
            "html",
            "htmldjango",
          },
        },

        pyright = {
          settings = {
            python = {
              analysis = {
                typeCheckingMode = "basic",
                autoSearchPaths = true,
                useLibraryCodeForTypes = true,
              },
            },
          },
        },

        -- üëâ YAML
        yamlls = {
          settings = {
            yaml = {
              keyOrdering = false, -- Kh√¥ng √©p s·∫Øp x·∫øp key trong YAML
            },
          },
        },

        -- üëâ Lua
        lua_ls = {
          single_file_support = true,
          settings = {
            Lua = {
              workspace = {
                checkThirdParty = false, -- Kh√¥ng c·∫£nh b√°o workspace b√™n th·ª© 3
              },
              completion = {
                workspaceWord = true,
                callSnippet = "Both", -- G·ª£i √Ω c·∫£ h√†m c√≥ snippet
              },
              misc = {
                parameters = {
                  -- "--log-level=trace", -- (B·ªè comment ƒë·ªÉ debug)
                },
              },
              hint = {
                enable = true, -- B·∫≠t g·ª£i √Ω inline
                setType = false, -- Kh√¥ng hi·ªán g·ª£i √Ω ki·ªÉu cho `set`
                paramType = true, -- G·ª£i √Ω ki·ªÉu tham s·ªë
                paramName = "Disable",
                semicolon = "Disable",
                arrayIndex = "Disable",
              },
              doc = {
                privateName = { "^_" }, -- Bi·∫øn b·∫Øt ƒë·∫ßu b·∫±ng "_" l√† private
              },
              type = {
                castNumberToInteger = true, -- √âp ki·ªÉu s·ªë th√†nh integer n·∫øu c·∫ßn
              },
              diagnostics = {
                disable = { "incomplete-signature-doc", "trailing-space" },
                groupSeverity = {
                  strong = "Warning",
                  strict = "Warning",
                },
                groupFileStatus = {
                  ["ambiguity"] = "Opened",
                  ["await"] = "Opened",
                  ["codestyle"] = "None",
                  ["duplicate"] = "Opened",
                  ["global"] = "Opened",
                  ["luadoc"] = "Opened",
                  ["redefined"] = "Opened",
                  ["strict"] = "Opened",
                  ["strong"] = "Opened",
                  ["type-check"] = "Opened",
                  ["unbalanced"] = "Opened",
                  ["unused"] = "Opened",
                },
                unusedLocalExclude = { "_*" }, -- Bi·∫øn b·∫Øt ƒë·∫ßu b·∫±ng "_" kh√¥ng b√°o unused
              },
              format = {
                enable = false, -- Kh√¥ng b·∫≠t autoformat
                defaultConfig = {
                  indent_style = "space",
                  indent_size = "2",
                  continuation_indent_size = "2",
                },
              },
            },
          },
        },
      },

      -- C√≥ th·ªÉ c·∫•u h√¨nh th√™m c√°c h√†nh vi kh·ªüi t·∫°o server ·ªü ƒë√¢y
      setup = {},
    },
  },

  -- ‚úÖ G√°n ph√≠m cho LSP actions (nh∆∞ `gd`) b·∫±ng Telescope
  {
    "neovim/nvim-lspconfig",
    opts = function()
      local keys = require("lazyvim.plugins.lsp.keymaps").get()
      vim.list_extend(keys, {
        {
          "gd", -- Goto Definition
          function()
            -- M·ªü ƒë·ªãnh nghƒ©a b·∫±ng Telescope, KH√îNG t√°i s·ª≠ d·ª•ng c·ª≠a s·ªï hi·ªán t·∫°i
            require("telescope.builtin").lsp_definitions({ reuse_win = false })
          end,
          desc = "Goto Definition",
          has = "definition", -- Ch·ªâ map n·∫øu server c√≥ h·ªó tr·ª£ "definition"
        },
      })
    end,
  },
}
